@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":ConfirmCommand" as ConfirmCommand LOGIC_COLOR
participant ":StateManager" as StateManager LOGIC_COLOR
participant "p:ConfirmationPendingResult" as ConfirmationPendingResult LOGIC_COLOR
end box
-> LogicManager #FFBBBB : execute("delete 1")
activate LogicManager

box Model MODEL_COLOR_T1
participant "m:Model" as m MODEL_COLOR
end box

LogicManager -> StateManager: isAwaitingUserConfirmation()
activate StateManager

StateManager --> LogicManager: false
deactivate StateManager

ref over LogicManager: parseGenericCommand

LogicManager -> StateManager: setAwaitingUserConfirmation(p)
activate StateManager

StateManager --> LogicManager
deactivate StateManager

[<-- LogicManager

-> LogicManager#FFBBBB: execute("y")
LogicManager -> StateManager: isAwaitingUserConfirmation()
activate StateManager

StateManager --> LogicManager: true
deactivate StateManager

LogicManager -> StateManager: getPendingOperation()
activate StateManager

StateManager --> LogicManager: p
deactivate StateManager

ref over LogicManager, ConfirmCommand: parseConfirmCommand

ConfirmCommand --> LogicManager: c

LogicManager -> ConfirmCommand: execute(m)
activate ConfirmCommand

ConfirmCommand -> ConfirmationPendingResult: executeOnConfirm()
activate ConfirmationPendingResult

ConfirmationPendingResult -> m: run()
activate m

m --> ConfirmationPendingResult
deactivate m

ConfirmationPendingResult --> ConfirmCommand

ConfirmCommand -> StateManager: clearAwaitingUserConfirmation()
activate StateManager

StateManager --> ConfirmCommand
deactivate StateManager

ConfirmationPendingResult --> LogicManager

[<--LogicManager

@enduml
